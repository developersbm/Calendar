generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Membership {
  id             Int       @id @default(autoincrement())
  type           String    // Free or Premium
  // maxFriends     Int    // Optionally remove if "friends" feature is no longer relevant
  // maxCelebrationPlan   Int
  // maxGroups      Int
  // maxSavingPlans Int
  users          User[]

  @@map("memberships")
}

model User {
  id               Int       @id @default(autoincrement())
  name             String
  email            String    @unique
  cognitoId        String    @unique
  membershipId     Int
  membership       Membership @relation(fields: [membershipId], references: [id])
  calendarId       Int?
  calendar         Calendar?  @relation(fields: [calendarId], references: [id])
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  profilePicture   String?

  GroupMember      GroupMember[]
  EventParticipant EventParticipant[]
  CelebrationPlanMember  CelebrationPlanMember[]
  Notification     Notification[]
  AuditLog         AuditLog[]

  celebrationPlans       CelebrationPlan[]

  @@map("users")
}

model Group {
  id          Int           @id @default(autoincrement())
  title       String
  description String?
  iconUrl     String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  members     GroupMember[]
  calendar    Calendar     @relation(fields: [calendarId], references: [id])
  calendarId  Int

  @@map("groups")
}

model GroupMember {
  groupId   Int
  userId    Int
  role      String       // Admin, Member
  status    String       // Active, Pending, Left
  group     Group        @relation(fields: [groupId], references: [id])
  user      User         @relation(fields: [userId], references: [id])

  @@id([groupId, userId])
  @@map("group_members")
}

model Calendar {
  id          Int       @id @default(autoincrement())
  ownerId     Int       // Missing when creating a calendar
  ownerType   String    // User or Group
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  events      Event[]
  User User[]
  Group Group[]
}

model Event {
  id             Int               @id @default(autoincrement())
  title          String
  description    String?
  startTime      DateTime
  endTime        DateTime
  recurrence     String?           // Recurring event type (daily, weekly, monthly)
  endRecurrence  DateTime?         // End date for recurrence
  calendarId     Int
  calendar       Calendar          @relation(fields: [calendarId], references: [id])
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  participants   EventParticipant[]

  @@map("events")
}

model EventParticipant {
  eventId Int
  userId  Int
  status  String       // Accepted, Declined, Pending
  event   Event         @relation(fields: [eventId], references: [id])
  user    User          @relation(fields: [userId], references: [id])

  @@id([eventId, userId])
  @@map("event_participants")
}

model CelebrationPlan {
    id              Int       @id @default(autoincrement())
    title           String
    description     String?
    userId          Int
    user            User      @relation(fields: [userId], references: [id])
    startTime       DateTime
    endTime         DateTime
    budget         Float?

    venueId         Int?      @unique
    venue           Venue?    @relation(fields: [venueId], references: [id], onDelete: Cascade)

    foodId          Int?      @unique
    food            Food?     @relation(fields: [foodId], references: [id], onDelete: Cascade)

    decoratorId     Int?      @unique
    decorator       Decorator? @relation(fields: [decoratorId], references: [id], onDelete: Cascade)

    entertainmentId Int?      @unique
    entertainment   Entertainment? @relation(fields: [entertainmentId], references: [id], onDelete: Cascade)

    members        CelebrationPlanMember[]

    createdAt      DateTime    @default(now())
    updatedAt      DateTime    @updatedAt
}


model CelebrationPlanMember {
  planId   Int
  userId   Int
  role     String    // Organizer, Guest, Vendor, etc.
  status   String    // Pending, Accepted, Declined

  plan     CelebrationPlan @relation(fields: [planId], references: [id])
  user     User            @relation(fields: [userId], references: [id])

  @@id([planId, userId])
  @@map("celebration_plan_members")
}

model Venue {
  id        Int     @id @default(autoincrement())
  name      String
  location  String
  price     Float
  plan      CelebrationPlan?

  @@map("venues")
}

model Food {
  id        Int     @id @default(autoincrement())
  type      String  // e.g., Buffet, Plated Dinner
  items     Json    // List of food items
  price     Float
  plan      CelebrationPlan?

  @@map("foods")
}

model Decorator {
  id        Int     @id @default(autoincrement())
  name      String
  theme     String?
  price     Float
  plan      CelebrationPlan?

  @@map("decorators")
}

model Entertainment {
  id        Int     @id @default(autoincrement())
  name      String
  style     String  // DJ, Live Band, etc.
  price     Float
  plan      CelebrationPlan?

  @@map("entertainment")
}

model SavingPlan {
  id             Int           @id @default(autoincrement())
  goalAmount     Float
  currentBalance Float          @default(0)
  frequency      String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@map("saving_plans")
}

model Transaction {
  id          Int       @id @default(autoincrement())
  ownerId     Int
  type        String    // Either "Deposit" or "Withdraw" 
  amount      Float
  date        DateTime  @default(now())

  @@map("transactions")
}


model Notification {
  id          Int      @id @default(autoincrement())
  receiver    Int
  sender    Int
  type        String   // Event Invitation, Friend Request, Saving Plan Reminder  
  status      String   // Accepted, Declined, None
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [receiver], references: [id])

  @@map("notifications")
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  actionType  String   // Create, Update, Delete
  entityType  String   // User, Group, Event, etc.
  userId      Int
  details     Json?    // Additional metadata for actions
  timestamp   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}